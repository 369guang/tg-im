// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.20.3
// source: group.proto

package group

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GroupService_CreateGroup_FullMethodName             = "/group.GroupService/CreateGroup"
	GroupService_UpdateGroupName_FullMethodName         = "/group.GroupService/UpdateGroupName"
	GroupService_UpdateGroupAvatar_FullMethodName       = "/group.GroupService/UpdateGroupAvatar"
	GroupService_UpdateGroupAnnouncement_FullMethodName = "/group.GroupService/UpdateGroupAnnouncement"
	GroupService_GetGroupInfo_FullMethodName            = "/group.GroupService/GetGroupInfo"
	GroupService_JoinGroup_FullMethodName               = "/group.GroupService/JoinGroup"
	GroupService_LeaveGroup_FullMethodName              = "/group.GroupService/LeaveGroup"
	GroupService_AddMembers_FullMethodName              = "/group.GroupService/AddMembers"
	GroupService_RemoveMembers_FullMethodName           = "/group.GroupService/RemoveMembers"
	GroupService_DissolveGroup_FullMethodName           = "/group.GroupService/DissolveGroup"
)

// GroupServiceClient is the client API for GroupService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GroupServiceClient interface {
	// 创建群组
	CreateGroup(ctx context.Context, in *Group, opts ...grpc.CallOption) (*GroupInfoResponse, error)
	// 更新群组名称
	UpdateGroupName(ctx context.Context, in *Group, opts ...grpc.CallOption) (*GroupInfoResponse, error)
	// 更新群组头像
	UpdateGroupAvatar(ctx context.Context, in *Group, opts ...grpc.CallOption) (*GroupInfoResponse, error)
	// 更新群组公告
	UpdateGroupAnnouncement(ctx context.Context, in *Group, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 获取群组信息
	GetGroupInfo(ctx context.Context, in *GroupInfoRequest, opts ...grpc.CallOption) (*GroupInfoResponse, error)
	// 加入群组
	JoinGroup(ctx context.Context, in *GroupOperationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 退出群组
	LeaveGroup(ctx context.Context, in *GroupOperationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 添加群组成员
	AddMembers(ctx context.Context, in *GroupOperationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 移除群组成员
	RemoveMembers(ctx context.Context, in *GroupOperationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 解散群组
	DissolveGroup(ctx context.Context, in *GroupOperationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type groupServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGroupServiceClient(cc grpc.ClientConnInterface) GroupServiceClient {
	return &groupServiceClient{cc}
}

func (c *groupServiceClient) CreateGroup(ctx context.Context, in *Group, opts ...grpc.CallOption) (*GroupInfoResponse, error) {
	out := new(GroupInfoResponse)
	err := c.cc.Invoke(ctx, GroupService_CreateGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServiceClient) UpdateGroupName(ctx context.Context, in *Group, opts ...grpc.CallOption) (*GroupInfoResponse, error) {
	out := new(GroupInfoResponse)
	err := c.cc.Invoke(ctx, GroupService_UpdateGroupName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServiceClient) UpdateGroupAvatar(ctx context.Context, in *Group, opts ...grpc.CallOption) (*GroupInfoResponse, error) {
	out := new(GroupInfoResponse)
	err := c.cc.Invoke(ctx, GroupService_UpdateGroupAvatar_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServiceClient) UpdateGroupAnnouncement(ctx context.Context, in *Group, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, GroupService_UpdateGroupAnnouncement_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServiceClient) GetGroupInfo(ctx context.Context, in *GroupInfoRequest, opts ...grpc.CallOption) (*GroupInfoResponse, error) {
	out := new(GroupInfoResponse)
	err := c.cc.Invoke(ctx, GroupService_GetGroupInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServiceClient) JoinGroup(ctx context.Context, in *GroupOperationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, GroupService_JoinGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServiceClient) LeaveGroup(ctx context.Context, in *GroupOperationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, GroupService_LeaveGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServiceClient) AddMembers(ctx context.Context, in *GroupOperationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, GroupService_AddMembers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServiceClient) RemoveMembers(ctx context.Context, in *GroupOperationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, GroupService_RemoveMembers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServiceClient) DissolveGroup(ctx context.Context, in *GroupOperationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, GroupService_DissolveGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GroupServiceServer is the server API for GroupService service.
// All implementations must embed UnimplementedGroupServiceServer
// for forward compatibility
type GroupServiceServer interface {
	// 创建群组
	CreateGroup(context.Context, *Group) (*GroupInfoResponse, error)
	// 更新群组名称
	UpdateGroupName(context.Context, *Group) (*GroupInfoResponse, error)
	// 更新群组头像
	UpdateGroupAvatar(context.Context, *Group) (*GroupInfoResponse, error)
	// 更新群组公告
	UpdateGroupAnnouncement(context.Context, *Group) (*emptypb.Empty, error)
	// 获取群组信息
	GetGroupInfo(context.Context, *GroupInfoRequest) (*GroupInfoResponse, error)
	// 加入群组
	JoinGroup(context.Context, *GroupOperationRequest) (*emptypb.Empty, error)
	// 退出群组
	LeaveGroup(context.Context, *GroupOperationRequest) (*emptypb.Empty, error)
	// 添加群组成员
	AddMembers(context.Context, *GroupOperationRequest) (*emptypb.Empty, error)
	// 移除群组成员
	RemoveMembers(context.Context, *GroupOperationRequest) (*emptypb.Empty, error)
	// 解散群组
	DissolveGroup(context.Context, *GroupOperationRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedGroupServiceServer()
}

// UnimplementedGroupServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGroupServiceServer struct {
}

func (UnimplementedGroupServiceServer) CreateGroup(context.Context, *Group) (*GroupInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroup not implemented")
}
func (UnimplementedGroupServiceServer) UpdateGroupName(context.Context, *Group) (*GroupInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGroupName not implemented")
}
func (UnimplementedGroupServiceServer) UpdateGroupAvatar(context.Context, *Group) (*GroupInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGroupAvatar not implemented")
}
func (UnimplementedGroupServiceServer) UpdateGroupAnnouncement(context.Context, *Group) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGroupAnnouncement not implemented")
}
func (UnimplementedGroupServiceServer) GetGroupInfo(context.Context, *GroupInfoRequest) (*GroupInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupInfo not implemented")
}
func (UnimplementedGroupServiceServer) JoinGroup(context.Context, *GroupOperationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinGroup not implemented")
}
func (UnimplementedGroupServiceServer) LeaveGroup(context.Context, *GroupOperationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveGroup not implemented")
}
func (UnimplementedGroupServiceServer) AddMembers(context.Context, *GroupOperationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMembers not implemented")
}
func (UnimplementedGroupServiceServer) RemoveMembers(context.Context, *GroupOperationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveMembers not implemented")
}
func (UnimplementedGroupServiceServer) DissolveGroup(context.Context, *GroupOperationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DissolveGroup not implemented")
}
func (UnimplementedGroupServiceServer) mustEmbedUnimplementedGroupServiceServer() {}

// UnsafeGroupServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GroupServiceServer will
// result in compilation errors.
type UnsafeGroupServiceServer interface {
	mustEmbedUnimplementedGroupServiceServer()
}

func RegisterGroupServiceServer(s grpc.ServiceRegistrar, srv GroupServiceServer) {
	s.RegisterService(&GroupService_ServiceDesc, srv)
}

func _GroupService_CreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Group)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServiceServer).CreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupService_CreateGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServiceServer).CreateGroup(ctx, req.(*Group))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupService_UpdateGroupName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Group)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServiceServer).UpdateGroupName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupService_UpdateGroupName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServiceServer).UpdateGroupName(ctx, req.(*Group))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupService_UpdateGroupAvatar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Group)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServiceServer).UpdateGroupAvatar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupService_UpdateGroupAvatar_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServiceServer).UpdateGroupAvatar(ctx, req.(*Group))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupService_UpdateGroupAnnouncement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Group)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServiceServer).UpdateGroupAnnouncement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupService_UpdateGroupAnnouncement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServiceServer).UpdateGroupAnnouncement(ctx, req.(*Group))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupService_GetGroupInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServiceServer).GetGroupInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupService_GetGroupInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServiceServer).GetGroupInfo(ctx, req.(*GroupInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupService_JoinGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupOperationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServiceServer).JoinGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupService_JoinGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServiceServer).JoinGroup(ctx, req.(*GroupOperationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupService_LeaveGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupOperationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServiceServer).LeaveGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupService_LeaveGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServiceServer).LeaveGroup(ctx, req.(*GroupOperationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupService_AddMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupOperationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServiceServer).AddMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupService_AddMembers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServiceServer).AddMembers(ctx, req.(*GroupOperationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupService_RemoveMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupOperationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServiceServer).RemoveMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupService_RemoveMembers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServiceServer).RemoveMembers(ctx, req.(*GroupOperationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupService_DissolveGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupOperationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServiceServer).DissolveGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupService_DissolveGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServiceServer).DissolveGroup(ctx, req.(*GroupOperationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GroupService_ServiceDesc is the grpc.ServiceDesc for GroupService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GroupService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "group.GroupService",
	HandlerType: (*GroupServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateGroup",
			Handler:    _GroupService_CreateGroup_Handler,
		},
		{
			MethodName: "UpdateGroupName",
			Handler:    _GroupService_UpdateGroupName_Handler,
		},
		{
			MethodName: "UpdateGroupAvatar",
			Handler:    _GroupService_UpdateGroupAvatar_Handler,
		},
		{
			MethodName: "UpdateGroupAnnouncement",
			Handler:    _GroupService_UpdateGroupAnnouncement_Handler,
		},
		{
			MethodName: "GetGroupInfo",
			Handler:    _GroupService_GetGroupInfo_Handler,
		},
		{
			MethodName: "JoinGroup",
			Handler:    _GroupService_JoinGroup_Handler,
		},
		{
			MethodName: "LeaveGroup",
			Handler:    _GroupService_LeaveGroup_Handler,
		},
		{
			MethodName: "AddMembers",
			Handler:    _GroupService_AddMembers_Handler,
		},
		{
			MethodName: "RemoveMembers",
			Handler:    _GroupService_RemoveMembers_Handler,
		},
		{
			MethodName: "DissolveGroup",
			Handler:    _GroupService_DissolveGroup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "group.proto",
}
