// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.20.3
// source: chat.proto

package chat

import (
	context "context"
	user "github.com/369guang/tg-im/server/rpc/user"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ChatService_SendMessage_FullMethodName         = "/chat.ChatService/SendMessage"
	ChatService_RecallMessage_FullMethodName       = "/chat.ChatService/RecallMessage"
	ChatService_FetchMessage_FullMethodName        = "/chat.ChatService/FetchMessage"
	ChatService_UpdateMessageStatus_FullMethodName = "/chat.ChatService/UpdateMessageStatus"
	ChatService_CreateConversation_FullMethodName  = "/chat.ChatService/CreateConversation"
	ChatService_FetchConversation_FullMethodName   = "/chat.ChatService/FetchConversation"
)

// ChatServiceClient is the client API for ChatService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatServiceClient interface {
	// 发送消息
	SendMessage(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error)
	// 撤回
	RecallMessage(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error)
	// 获取
	FetchMessage(ctx context.Context, in *Conversation, opts ...grpc.CallOption) (ChatService_FetchMessageClient, error)
	// 更新状态
	UpdateMessageStatus(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error)
	// 创建会话
	CreateConversation(ctx context.Context, in *Conversation, opts ...grpc.CallOption) (*Conversation, error)
	// 获取会话
	FetchConversation(ctx context.Context, in *user.User, opts ...grpc.CallOption) (ChatService_FetchConversationClient, error)
}

type chatServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChatServiceClient(cc grpc.ClientConnInterface) ChatServiceClient {
	return &chatServiceClient{cc}
}

func (c *chatServiceClient) SendMessage(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, ChatService_SendMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) RecallMessage(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, ChatService_RecallMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) FetchMessage(ctx context.Context, in *Conversation, opts ...grpc.CallOption) (ChatService_FetchMessageClient, error) {
	stream, err := c.cc.NewStream(ctx, &ChatService_ServiceDesc.Streams[0], ChatService_FetchMessage_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &chatServiceFetchMessageClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ChatService_FetchMessageClient interface {
	Recv() (*Message, error)
	grpc.ClientStream
}

type chatServiceFetchMessageClient struct {
	grpc.ClientStream
}

func (x *chatServiceFetchMessageClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *chatServiceClient) UpdateMessageStatus(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, ChatService_UpdateMessageStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) CreateConversation(ctx context.Context, in *Conversation, opts ...grpc.CallOption) (*Conversation, error) {
	out := new(Conversation)
	err := c.cc.Invoke(ctx, ChatService_CreateConversation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) FetchConversation(ctx context.Context, in *user.User, opts ...grpc.CallOption) (ChatService_FetchConversationClient, error) {
	stream, err := c.cc.NewStream(ctx, &ChatService_ServiceDesc.Streams[1], ChatService_FetchConversation_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &chatServiceFetchConversationClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ChatService_FetchConversationClient interface {
	Recv() (*Conversation, error)
	grpc.ClientStream
}

type chatServiceFetchConversationClient struct {
	grpc.ClientStream
}

func (x *chatServiceFetchConversationClient) Recv() (*Conversation, error) {
	m := new(Conversation)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ChatServiceServer is the server API for ChatService service.
// All implementations must embed UnimplementedChatServiceServer
// for forward compatibility
type ChatServiceServer interface {
	// 发送消息
	SendMessage(context.Context, *Message) (*Message, error)
	// 撤回
	RecallMessage(context.Context, *Message) (*Message, error)
	// 获取
	FetchMessage(*Conversation, ChatService_FetchMessageServer) error
	// 更新状态
	UpdateMessageStatus(context.Context, *Message) (*Message, error)
	// 创建会话
	CreateConversation(context.Context, *Conversation) (*Conversation, error)
	// 获取会话
	FetchConversation(*user.User, ChatService_FetchConversationServer) error
	mustEmbedUnimplementedChatServiceServer()
}

// UnimplementedChatServiceServer must be embedded to have forward compatible implementations.
type UnimplementedChatServiceServer struct {
}

func (UnimplementedChatServiceServer) SendMessage(context.Context, *Message) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedChatServiceServer) RecallMessage(context.Context, *Message) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecallMessage not implemented")
}
func (UnimplementedChatServiceServer) FetchMessage(*Conversation, ChatService_FetchMessageServer) error {
	return status.Errorf(codes.Unimplemented, "method FetchMessage not implemented")
}
func (UnimplementedChatServiceServer) UpdateMessageStatus(context.Context, *Message) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMessageStatus not implemented")
}
func (UnimplementedChatServiceServer) CreateConversation(context.Context, *Conversation) (*Conversation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConversation not implemented")
}
func (UnimplementedChatServiceServer) FetchConversation(*user.User, ChatService_FetchConversationServer) error {
	return status.Errorf(codes.Unimplemented, "method FetchConversation not implemented")
}
func (UnimplementedChatServiceServer) mustEmbedUnimplementedChatServiceServer() {}

// UnsafeChatServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatServiceServer will
// result in compilation errors.
type UnsafeChatServiceServer interface {
	mustEmbedUnimplementedChatServiceServer()
}

func RegisterChatServiceServer(s grpc.ServiceRegistrar, srv ChatServiceServer) {
	s.RegisterService(&ChatService_ServiceDesc, srv)
}

func _ChatService_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_SendMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).SendMessage(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_RecallMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).RecallMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_RecallMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).RecallMessage(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_FetchMessage_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Conversation)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChatServiceServer).FetchMessage(m, &chatServiceFetchMessageServer{stream})
}

type ChatService_FetchMessageServer interface {
	Send(*Message) error
	grpc.ServerStream
}

type chatServiceFetchMessageServer struct {
	grpc.ServerStream
}

func (x *chatServiceFetchMessageServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func _ChatService_UpdateMessageStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).UpdateMessageStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_UpdateMessageStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).UpdateMessageStatus(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_CreateConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Conversation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).CreateConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_CreateConversation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).CreateConversation(ctx, req.(*Conversation))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_FetchConversation_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(user.User)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChatServiceServer).FetchConversation(m, &chatServiceFetchConversationServer{stream})
}

type ChatService_FetchConversationServer interface {
	Send(*Conversation) error
	grpc.ServerStream
}

type chatServiceFetchConversationServer struct {
	grpc.ServerStream
}

func (x *chatServiceFetchConversationServer) Send(m *Conversation) error {
	return x.ServerStream.SendMsg(m)
}

// ChatService_ServiceDesc is the grpc.ServiceDesc for ChatService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chat.ChatService",
	HandlerType: (*ChatServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendMessage",
			Handler:    _ChatService_SendMessage_Handler,
		},
		{
			MethodName: "RecallMessage",
			Handler:    _ChatService_RecallMessage_Handler,
		},
		{
			MethodName: "UpdateMessageStatus",
			Handler:    _ChatService_UpdateMessageStatus_Handler,
		},
		{
			MethodName: "CreateConversation",
			Handler:    _ChatService_CreateConversation_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FetchMessage",
			Handler:       _ChatService_FetchMessage_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "FetchConversation",
			Handler:       _ChatService_FetchConversation_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "chat.proto",
}
