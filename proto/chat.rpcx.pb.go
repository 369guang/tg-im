// Code generated by protoc-gen-rpcx. DO NOT EDIT.
// versions:
// - protoc-gen-rpcx v0.3.0
// - protoc          v3.20.3
// source: chat.proto

package proto

import (
	context "context"
	client "github.com/smallnest/rpcx/client"
	protocol "github.com/smallnest/rpcx/protocol"
	server "github.com/smallnest/rpcx/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = context.TODO
var _ = server.NewServer
var _ = client.NewClient
var _ = protocol.NewMessage

// ================== interface skeleton ===================
type ChatServiceAble interface {
	// ChatServiceAble can be used for interface verification.

	// SendMessage is server rpc method as defined
	SendMessage(ctx context.Context, args *Message, reply *Message) (err error)

	// RecallMessage is server rpc method as defined
	RecallMessage(ctx context.Context, args *Message, reply *Message) (err error)

	// FetchMessage is server rpc method as defined
	FetchMessage(ctx context.Context, args *Conversation, reply *Message) (err error)

	// UpdateMessageStatus is server rpc method as defined
	UpdateMessageStatus(ctx context.Context, args *Message, reply *Message) (err error)

	// CreateConversation is server rpc method as defined
	CreateConversation(ctx context.Context, args *Conversation, reply *Conversation) (err error)

	// FetchConversation is server rpc method as defined
	FetchConversation(ctx context.Context, args *User, reply *Conversation) (err error)
}

// ================== server skeleton ===================
type ChatServiceImpl struct{}

// ServeForChatService starts a server only registers one service.
// You can register more services and only start one server.
// It blocks until the application exits.
func ServeForChatService(addr string) error {
	s := server.NewServer()
	s.RegisterName("ChatService", new(ChatServiceImpl), "")
	return s.Serve("tcp", addr)
}

// SendMessage is server rpc method as defined
func (s *ChatServiceImpl) SendMessage(ctx context.Context, args *Message, reply *Message) (err error) {
	// TODO: add business logics

	// TODO: setting return values
	*reply = Message{}

	return nil
}

// RecallMessage is server rpc method as defined
func (s *ChatServiceImpl) RecallMessage(ctx context.Context, args *Message, reply *Message) (err error) {
	// TODO: add business logics

	// TODO: setting return values
	*reply = Message{}

	return nil
}

// FetchMessage is server rpc method as defined
func (s *ChatServiceImpl) FetchMessage(ctx context.Context, args *Conversation, reply *Message) (err error) {
	// TODO: add business logics

	// TODO: setting return values
	*reply = Message{}

	return nil
}

// UpdateMessageStatus is server rpc method as defined
func (s *ChatServiceImpl) UpdateMessageStatus(ctx context.Context, args *Message, reply *Message) (err error) {
	// TODO: add business logics

	// TODO: setting return values
	*reply = Message{}

	return nil
}

// CreateConversation is server rpc method as defined
func (s *ChatServiceImpl) CreateConversation(ctx context.Context, args *Conversation, reply *Conversation) (err error) {
	// TODO: add business logics

	// TODO: setting return values
	*reply = Conversation{}

	return nil
}

// FetchConversation is server rpc method as defined
func (s *ChatServiceImpl) FetchConversation(ctx context.Context, args *User, reply *Conversation) (err error) {
	// TODO: add business logics

	// TODO: setting return values
	*reply = Conversation{}

	return nil
}

// ================== client stub ===================
// ChatService is a client wrapped XClient.
type ChatServiceClient struct {
	xclient client.XClient
}

// NewChatServiceClient wraps a XClient as ChatServiceClient.
// You can pass a shared XClient object created by NewXClientForChatService.
func NewChatServiceClient(xclient client.XClient) *ChatServiceClient {
	return &ChatServiceClient{xclient: xclient}
}

// NewXClientForChatService creates a XClient.
// You can configure this client with more options such as etcd registry, serialize type, select algorithm and fail mode.
func NewXClientForChatService(addr string) (client.XClient, error) {
	d, err := client.NewPeer2PeerDiscovery("tcp@"+addr, "")
	if err != nil {
		return nil, err
	}

	opt := client.DefaultOption
	opt.SerializeType = protocol.ProtoBuffer

	xclient := client.NewXClient("ChatService", client.Failtry, client.RoundRobin, d, opt)

	return xclient, nil
}

// SendMessage is client rpc method as defined
func (c *ChatServiceClient) SendMessage(ctx context.Context, args *Message) (reply *Message, err error) {
	reply = &Message{}
	err = c.xclient.Call(ctx, "SendMessage", args, reply)
	return reply, err
}

// RecallMessage is client rpc method as defined
func (c *ChatServiceClient) RecallMessage(ctx context.Context, args *Message) (reply *Message, err error) {
	reply = &Message{}
	err = c.xclient.Call(ctx, "RecallMessage", args, reply)
	return reply, err
}

// FetchMessage is client rpc method as defined
func (c *ChatServiceClient) FetchMessage(ctx context.Context, args *Conversation) (reply *Message, err error) {
	reply = &Message{}
	err = c.xclient.Call(ctx, "FetchMessage", args, reply)
	return reply, err
}

// UpdateMessageStatus is client rpc method as defined
func (c *ChatServiceClient) UpdateMessageStatus(ctx context.Context, args *Message) (reply *Message, err error) {
	reply = &Message{}
	err = c.xclient.Call(ctx, "UpdateMessageStatus", args, reply)
	return reply, err
}

// CreateConversation is client rpc method as defined
func (c *ChatServiceClient) CreateConversation(ctx context.Context, args *Conversation) (reply *Conversation, err error) {
	reply = &Conversation{}
	err = c.xclient.Call(ctx, "CreateConversation", args, reply)
	return reply, err
}

// FetchConversation is client rpc method as defined
func (c *ChatServiceClient) FetchConversation(ctx context.Context, args *User) (reply *Conversation, err error) {
	reply = &Conversation{}
	err = c.xclient.Call(ctx, "FetchConversation", args, reply)
	return reply, err
}

// ================== oneclient stub ===================
// ChatServiceOneClient is a client wrapped oneClient.
type ChatServiceOneClient struct {
	serviceName string
	oneclient   *client.OneClient
}

// NewChatServiceOneClient wraps a OneClient as ChatServiceOneClient.
// You can pass a shared OneClient object created by NewOneClientForChatService.
func NewChatServiceOneClient(oneclient *client.OneClient) *ChatServiceOneClient {
	return &ChatServiceOneClient{
		serviceName: "ChatService",
		oneclient:   oneclient,
	}
}

// ======================================================

// SendMessage is client rpc method as defined
func (c *ChatServiceOneClient) SendMessage(ctx context.Context, args *Message) (reply *Message, err error) {
	reply = &Message{}
	err = c.oneclient.Call(ctx, c.serviceName, "SendMessage", args, reply)
	return reply, err
}

// RecallMessage is client rpc method as defined
func (c *ChatServiceOneClient) RecallMessage(ctx context.Context, args *Message) (reply *Message, err error) {
	reply = &Message{}
	err = c.oneclient.Call(ctx, c.serviceName, "RecallMessage", args, reply)
	return reply, err
}

// FetchMessage is client rpc method as defined
func (c *ChatServiceOneClient) FetchMessage(ctx context.Context, args *Conversation) (reply *Message, err error) {
	reply = &Message{}
	err = c.oneclient.Call(ctx, c.serviceName, "FetchMessage", args, reply)
	return reply, err
}

// UpdateMessageStatus is client rpc method as defined
func (c *ChatServiceOneClient) UpdateMessageStatus(ctx context.Context, args *Message) (reply *Message, err error) {
	reply = &Message{}
	err = c.oneclient.Call(ctx, c.serviceName, "UpdateMessageStatus", args, reply)
	return reply, err
}

// CreateConversation is client rpc method as defined
func (c *ChatServiceOneClient) CreateConversation(ctx context.Context, args *Conversation) (reply *Conversation, err error) {
	reply = &Conversation{}
	err = c.oneclient.Call(ctx, c.serviceName, "CreateConversation", args, reply)
	return reply, err
}

// FetchConversation is client rpc method as defined
func (c *ChatServiceOneClient) FetchConversation(ctx context.Context, args *User) (reply *Conversation, err error) {
	reply = &Conversation{}
	err = c.oneclient.Call(ctx, c.serviceName, "FetchConversation", args, reply)
	return reply, err
}
