// Code generated by protoc-gen-rpcx. DO NOT EDIT.
// versions:
// - protoc-gen-rpcx v0.3.0
// - protoc          v3.20.3
// source: group.proto

package proto

import (
	context "context"
	client "github.com/smallnest/rpcx/client"
	protocol "github.com/smallnest/rpcx/protocol"
	server "github.com/smallnest/rpcx/server"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = context.TODO
var _ = server.NewServer
var _ = client.NewClient
var _ = protocol.NewMessage

// ================== interface skeleton ===================
type GroupServiceAble interface {
	// GroupServiceAble can be used for interface verification.

	// CreateGroup is server rpc method as defined
	CreateGroup(ctx context.Context, args *Group, reply *GroupInfoResponse) (err error)

	// UpdateGroupName is server rpc method as defined
	UpdateGroupName(ctx context.Context, args *Group, reply *GroupInfoResponse) (err error)

	// UpdateGroupAvatar is server rpc method as defined
	UpdateGroupAvatar(ctx context.Context, args *Group, reply *GroupInfoResponse) (err error)

	// UpdateGroupAnnouncement is server rpc method as defined
	UpdateGroupAnnouncement(ctx context.Context, args *Group, reply *emptypb.Empty) (err error)

	// GetGroupInfo is server rpc method as defined
	GetGroupInfo(ctx context.Context, args *GroupInfoRequest, reply *GroupInfoResponse) (err error)

	// JoinGroup is server rpc method as defined
	JoinGroup(ctx context.Context, args *GroupOperationRequest, reply *emptypb.Empty) (err error)

	// LeaveGroup is server rpc method as defined
	LeaveGroup(ctx context.Context, args *GroupOperationRequest, reply *emptypb.Empty) (err error)

	// AddMembers is server rpc method as defined
	AddMembers(ctx context.Context, args *GroupOperationRequest, reply *emptypb.Empty) (err error)

	// RemoveMembers is server rpc method as defined
	RemoveMembers(ctx context.Context, args *GroupOperationRequest, reply *emptypb.Empty) (err error)

	// DissolveGroup is server rpc method as defined
	DissolveGroup(ctx context.Context, args *GroupOperationRequest, reply *emptypb.Empty) (err error)
}

// ================== server skeleton ===================
type GroupServiceImpl struct{}

// ServeForGroupService starts a server only registers one service.
// You can register more services and only start one server.
// It blocks until the application exits.
func ServeForGroupService(addr string) error {
	s := server.NewServer()
	s.RegisterName("GroupService", new(GroupServiceImpl), "")
	return s.Serve("tcp", addr)
}

// CreateGroup is server rpc method as defined
func (s *GroupServiceImpl) CreateGroup(ctx context.Context, args *Group, reply *GroupInfoResponse) (err error) {
	// TODO: add business logics

	// TODO: setting return values
	*reply = GroupInfoResponse{}

	return nil
}

// UpdateGroupName is server rpc method as defined
func (s *GroupServiceImpl) UpdateGroupName(ctx context.Context, args *Group, reply *GroupInfoResponse) (err error) {
	// TODO: add business logics

	// TODO: setting return values
	*reply = GroupInfoResponse{}

	return nil
}

// UpdateGroupAvatar is server rpc method as defined
func (s *GroupServiceImpl) UpdateGroupAvatar(ctx context.Context, args *Group, reply *GroupInfoResponse) (err error) {
	// TODO: add business logics

	// TODO: setting return values
	*reply = GroupInfoResponse{}

	return nil
}

// UpdateGroupAnnouncement is server rpc method as defined
func (s *GroupServiceImpl) UpdateGroupAnnouncement(ctx context.Context, args *Group, reply *emptypb.Empty) (err error) {
	// TODO: add business logics

	// TODO: setting return values
	*reply = emptypb.Empty{}

	return nil
}

// GetGroupInfo is server rpc method as defined
func (s *GroupServiceImpl) GetGroupInfo(ctx context.Context, args *GroupInfoRequest, reply *GroupInfoResponse) (err error) {
	// TODO: add business logics

	// TODO: setting return values
	*reply = GroupInfoResponse{}

	return nil
}

// JoinGroup is server rpc method as defined
func (s *GroupServiceImpl) JoinGroup(ctx context.Context, args *GroupOperationRequest, reply *emptypb.Empty) (err error) {
	// TODO: add business logics

	// TODO: setting return values
	*reply = emptypb.Empty{}

	return nil
}

// LeaveGroup is server rpc method as defined
func (s *GroupServiceImpl) LeaveGroup(ctx context.Context, args *GroupOperationRequest, reply *emptypb.Empty) (err error) {
	// TODO: add business logics

	// TODO: setting return values
	*reply = emptypb.Empty{}

	return nil
}

// AddMembers is server rpc method as defined
func (s *GroupServiceImpl) AddMembers(ctx context.Context, args *GroupOperationRequest, reply *emptypb.Empty) (err error) {
	// TODO: add business logics

	// TODO: setting return values
	*reply = emptypb.Empty{}

	return nil
}

// RemoveMembers is server rpc method as defined
func (s *GroupServiceImpl) RemoveMembers(ctx context.Context, args *GroupOperationRequest, reply *emptypb.Empty) (err error) {
	// TODO: add business logics

	// TODO: setting return values
	*reply = emptypb.Empty{}

	return nil
}

// DissolveGroup is server rpc method as defined
func (s *GroupServiceImpl) DissolveGroup(ctx context.Context, args *GroupOperationRequest, reply *emptypb.Empty) (err error) {
	// TODO: add business logics

	// TODO: setting return values
	*reply = emptypb.Empty{}

	return nil
}

// ================== client stub ===================
// GroupService is a client wrapped XClient.
type GroupServiceClient struct {
	xclient client.XClient
}

// NewGroupServiceClient wraps a XClient as GroupServiceClient.
// You can pass a shared XClient object created by NewXClientForGroupService.
func NewGroupServiceClient(xclient client.XClient) *GroupServiceClient {
	return &GroupServiceClient{xclient: xclient}
}

// NewXClientForGroupService creates a XClient.
// You can configure this client with more options such as etcd registry, serialize type, select algorithm and fail mode.
func NewXClientForGroupService(addr string) (client.XClient, error) {
	d, err := client.NewPeer2PeerDiscovery("tcp@"+addr, "")
	if err != nil {
		return nil, err
	}

	opt := client.DefaultOption
	opt.SerializeType = protocol.ProtoBuffer

	xclient := client.NewXClient("GroupService", client.Failtry, client.RoundRobin, d, opt)

	return xclient, nil
}

// CreateGroup is client rpc method as defined
func (c *GroupServiceClient) CreateGroup(ctx context.Context, args *Group) (reply *GroupInfoResponse, err error) {
	reply = &GroupInfoResponse{}
	err = c.xclient.Call(ctx, "CreateGroup", args, reply)
	return reply, err
}

// UpdateGroupName is client rpc method as defined
func (c *GroupServiceClient) UpdateGroupName(ctx context.Context, args *Group) (reply *GroupInfoResponse, err error) {
	reply = &GroupInfoResponse{}
	err = c.xclient.Call(ctx, "UpdateGroupName", args, reply)
	return reply, err
}

// UpdateGroupAvatar is client rpc method as defined
func (c *GroupServiceClient) UpdateGroupAvatar(ctx context.Context, args *Group) (reply *GroupInfoResponse, err error) {
	reply = &GroupInfoResponse{}
	err = c.xclient.Call(ctx, "UpdateGroupAvatar", args, reply)
	return reply, err
}

// UpdateGroupAnnouncement is client rpc method as defined
func (c *GroupServiceClient) UpdateGroupAnnouncement(ctx context.Context, args *Group) (reply *emptypb.Empty, err error) {
	reply = &emptypb.Empty{}
	err = c.xclient.Call(ctx, "UpdateGroupAnnouncement", args, reply)
	return reply, err
}

// GetGroupInfo is client rpc method as defined
func (c *GroupServiceClient) GetGroupInfo(ctx context.Context, args *GroupInfoRequest) (reply *GroupInfoResponse, err error) {
	reply = &GroupInfoResponse{}
	err = c.xclient.Call(ctx, "GetGroupInfo", args, reply)
	return reply, err
}

// JoinGroup is client rpc method as defined
func (c *GroupServiceClient) JoinGroup(ctx context.Context, args *GroupOperationRequest) (reply *emptypb.Empty, err error) {
	reply = &emptypb.Empty{}
	err = c.xclient.Call(ctx, "JoinGroup", args, reply)
	return reply, err
}

// LeaveGroup is client rpc method as defined
func (c *GroupServiceClient) LeaveGroup(ctx context.Context, args *GroupOperationRequest) (reply *emptypb.Empty, err error) {
	reply = &emptypb.Empty{}
	err = c.xclient.Call(ctx, "LeaveGroup", args, reply)
	return reply, err
}

// AddMembers is client rpc method as defined
func (c *GroupServiceClient) AddMembers(ctx context.Context, args *GroupOperationRequest) (reply *emptypb.Empty, err error) {
	reply = &emptypb.Empty{}
	err = c.xclient.Call(ctx, "AddMembers", args, reply)
	return reply, err
}

// RemoveMembers is client rpc method as defined
func (c *GroupServiceClient) RemoveMembers(ctx context.Context, args *GroupOperationRequest) (reply *emptypb.Empty, err error) {
	reply = &emptypb.Empty{}
	err = c.xclient.Call(ctx, "RemoveMembers", args, reply)
	return reply, err
}

// DissolveGroup is client rpc method as defined
func (c *GroupServiceClient) DissolveGroup(ctx context.Context, args *GroupOperationRequest) (reply *emptypb.Empty, err error) {
	reply = &emptypb.Empty{}
	err = c.xclient.Call(ctx, "DissolveGroup", args, reply)
	return reply, err
}

// ================== oneclient stub ===================
// GroupServiceOneClient is a client wrapped oneClient.
type GroupServiceOneClient struct {
	serviceName string
	oneclient   *client.OneClient
}

// NewGroupServiceOneClient wraps a OneClient as GroupServiceOneClient.
// You can pass a shared OneClient object created by NewOneClientForGroupService.
func NewGroupServiceOneClient(oneclient *client.OneClient) *GroupServiceOneClient {
	return &GroupServiceOneClient{
		serviceName: "GroupService",
		oneclient:   oneclient,
	}
}

// ======================================================

// CreateGroup is client rpc method as defined
func (c *GroupServiceOneClient) CreateGroup(ctx context.Context, args *Group) (reply *GroupInfoResponse, err error) {
	reply = &GroupInfoResponse{}
	err = c.oneclient.Call(ctx, c.serviceName, "CreateGroup", args, reply)
	return reply, err
}

// UpdateGroupName is client rpc method as defined
func (c *GroupServiceOneClient) UpdateGroupName(ctx context.Context, args *Group) (reply *GroupInfoResponse, err error) {
	reply = &GroupInfoResponse{}
	err = c.oneclient.Call(ctx, c.serviceName, "UpdateGroupName", args, reply)
	return reply, err
}

// UpdateGroupAvatar is client rpc method as defined
func (c *GroupServiceOneClient) UpdateGroupAvatar(ctx context.Context, args *Group) (reply *GroupInfoResponse, err error) {
	reply = &GroupInfoResponse{}
	err = c.oneclient.Call(ctx, c.serviceName, "UpdateGroupAvatar", args, reply)
	return reply, err
}

// UpdateGroupAnnouncement is client rpc method as defined
func (c *GroupServiceOneClient) UpdateGroupAnnouncement(ctx context.Context, args *Group) (reply *emptypb.Empty, err error) {
	reply = &emptypb.Empty{}
	err = c.oneclient.Call(ctx, c.serviceName, "UpdateGroupAnnouncement", args, reply)
	return reply, err
}

// GetGroupInfo is client rpc method as defined
func (c *GroupServiceOneClient) GetGroupInfo(ctx context.Context, args *GroupInfoRequest) (reply *GroupInfoResponse, err error) {
	reply = &GroupInfoResponse{}
	err = c.oneclient.Call(ctx, c.serviceName, "GetGroupInfo", args, reply)
	return reply, err
}

// JoinGroup is client rpc method as defined
func (c *GroupServiceOneClient) JoinGroup(ctx context.Context, args *GroupOperationRequest) (reply *emptypb.Empty, err error) {
	reply = &emptypb.Empty{}
	err = c.oneclient.Call(ctx, c.serviceName, "JoinGroup", args, reply)
	return reply, err
}

// LeaveGroup is client rpc method as defined
func (c *GroupServiceOneClient) LeaveGroup(ctx context.Context, args *GroupOperationRequest) (reply *emptypb.Empty, err error) {
	reply = &emptypb.Empty{}
	err = c.oneclient.Call(ctx, c.serviceName, "LeaveGroup", args, reply)
	return reply, err
}

// AddMembers is client rpc method as defined
func (c *GroupServiceOneClient) AddMembers(ctx context.Context, args *GroupOperationRequest) (reply *emptypb.Empty, err error) {
	reply = &emptypb.Empty{}
	err = c.oneclient.Call(ctx, c.serviceName, "AddMembers", args, reply)
	return reply, err
}

// RemoveMembers is client rpc method as defined
func (c *GroupServiceOneClient) RemoveMembers(ctx context.Context, args *GroupOperationRequest) (reply *emptypb.Empty, err error) {
	reply = &emptypb.Empty{}
	err = c.oneclient.Call(ctx, c.serviceName, "RemoveMembers", args, reply)
	return reply, err
}

// DissolveGroup is client rpc method as defined
func (c *GroupServiceOneClient) DissolveGroup(ctx context.Context, args *GroupOperationRequest) (reply *emptypb.Empty, err error) {
	reply = &emptypb.Empty{}
	err = c.oneclient.Call(ctx, c.serviceName, "DissolveGroup", args, reply)
	return reply, err
}
